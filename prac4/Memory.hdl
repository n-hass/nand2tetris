// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // determine areas of memory to operate on
    DMux(in=true, sel=address[14], a=ram, b=scr_keyb);

    DMux(in=scr_keyb, sel=address[13], a=scr, b=keyb);

    // main memory access logic
    And(a=load, b=ram, out=refRam);
    RAM16K(in=in, load=refRam, address=address[0..13], out=ramOut);

    // screen change logic
    DMux(in=scr, sel=address[12], a=px_L, b=px_H);
    And(a=load, b=px_L, out=pxL_o);
    And(a=load, b=px_H, out=pxH_o);
    RAM4K(in=in, load=pxL_o, address=address[0..11], out=pxLOut);
    RAM4K(in=in, load=pxH_o, address=address[0..11], out=pxHOut);
    Mux16(a=pxLOut, b=pxHOut, sel=px_H, out=scrOut);

    // keyboard memory mapping logic
    And(a=load, b=keyb, out=refKeyb);
    Register(in=in, load=refKeyb, out=resKeyb);
    Mux16(a=scrOut, b=resKeyb, sel=refKeyb, out=scr_keybOut);
    Mux16(a=ramOut, b=scr_keybOut, sel=scr_keyb, out=out);
}