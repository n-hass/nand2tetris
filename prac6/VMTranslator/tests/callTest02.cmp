@1	// push constant 1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Hartley
// store callers pointers
@SP
D=M
@R13
M=D
@RET.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL	// store LCL on stack
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG	// store ARG on stack
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS	// store THIS on stack
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT	// store THAT on stack
D=M
@SP
A=M
M=D
@SP
M=M+1
// setup ARG and LCL for callee
@R13	// update ARG
D=M
@1
D=D-A
@ARG
M=D
@SP	// update LCL
D=M
@LCL
M=D
@FUNC.defMod.Hartley
0;JMP
(RET.1)
(FUNC.defMod.Hartley)	// function declaration: Hartley 2
@SP	
A=M	
// clearing the stack for function: Hartley
M=0
A=A+1
M=0
A=A+1
// finished clearing
D=A
@SP
M=D
@ARG	// push argument 0
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG	// push argument 1
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP	// sub
AM=M-1
D=M
A=A-1
M=M-D
// returning to caller
@LCL
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@LCL
AM=M-1
D=M
@THAT
M=D
@LCL
AM=M-1
D=M
@THIS
M=D
@LCL
AM=M-1
D=M
@ARG
M=D
@LCL
A=M-1
D=M
@LCL
M=D
@R13	// jump back to caller
A=M
0;JMP
